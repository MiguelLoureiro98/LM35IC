{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the LM35IC library documentation","text":"<p>The LM35IC library is essentially a sensor driver for LM35 integrated circuit temperature sensors. </p> <p>This is a library to help users interface with the LM35 family of sensors. It is flexible enough to be used with any of these sensors, as well as every Arduino board based on the ATMega328P.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Support for the whole LM35 family: this library can be used with every LM35 sensor, including the LM35, LM35A, LM35CA, LM35C and LM35D sensors. Take a look at the data sheet for more details;</li> <li>Error computation: leverage the library's methods to compute the error associated with your measurements;</li> <li>Signal conditioning compensation: the library takes the gain and the offset of the signal conditioning circuit into account, making it far more flexible;</li> <li>Support for different boards: you can manually specify your board's operating voltage and ADC characteristics. This makes the library compatible with several Arduino boards.</li> </ul>"},{"location":"#documentation-guide","title":"Documentation guide","text":"<p>Check our installation page for instructions on how to install the package.</p> <p>For a basic guide on how to use the library, please refer to our basic usage guide.</p> <p>If more detailed information about the class and types provided by the library is required, please refer to our API reference.</p>"},{"location":"API_reference/","title":"Welcome to the LM35IC API reference","text":"<p>This is the place to be in if you need more information on the LM35IC class or the sensors type.</p>"},{"location":"about/","title":"About","text":"<p>This library was conceived, developed, tested, and documented by Miguel Loureiro, a Mechanical Engineer who specialises in Control Systems, Machine Learning, and Optimisation.</p>"},{"location":"basics/","title":"Basic usage","text":"<p>Here is an example of how to use the LM35IC library to collect temperature measurements using the LM35D sensor. Copy this sketch to the Arduino IDE, compile it, and upload it. Make sure your sensor's output pin is connected to pin A0.</p> <p>If you are using another LM35 sensor, take a look at this example.</p> <pre><code>/*********************************************************************************************\n\nThis is a very simple example that illustrates how the library can be used to read temperature\nvalues from a sensor. For this sketch, the LM35D sensor was used (this is the default).\n\nNote that this library supports all sensors from the LM35 family.\n\n**********************************************************************************************/\n\n#include &lt;stdint.h&gt;\n#include \"LM35IC.h\"\n\nusing LM35::LM35IC;\n\n// Set the sampling time and the initial time.\nconst unsigned long Ts = 5.0 * 1000.0;\nunsigned long previous_time = 0.0;\n\n// Define the input pin and create a sensor instance.\nconst uint8_t pin = A0;\nLM35IC sensor = LM35IC(pin);\n\nvoid setup() {\n\n    // Set up serial and analog input pin.\n    Serial.begin(9600);\n    pinMode(pin, INPUT);\n\n}\n\nvoid loop() {\n\n    // Get the current time.\n    unsigned long current_time = millis();\n\n    // Check if enough time has passed (i.e. if the sampling time has been exceeded). If so, collect another sample.\n    if(current_time - previous_time &gt;= Ts){\n\n        // Read temperature value.\n        double temp = sensor.readTemp();\n\n        // Print value to the serial monitor.\n        Serial.print(\"Temperature: \");\n        Serial.print(temp);\n        Serial.println(\"\u00ba C\");\n\n        // Set the current time as the new reference time instant.\n        previous_time = current_time;\n\n    }\n\n}\n</code></pre> <p>For more information on how to use the library, please take a look at our API reference.</p> <p>For more complex examples that illustrate how to leverage the library's advanced capabilities, try running some of the examples provided with the library.</p>"},{"location":"installation/","title":"Installation","text":"<p>The library has yet to be added to the Arduino Library Index. Once it is accepted, you will be able to install it using the Arduino Library Manager.</p> <p>See our basic guide for a quick introduction on how to use the library.</p>"},{"location":"LM35IC/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace LM35 The library's namespace. <ul> <li>class LM35IC LM35 sensor class. </li> </ul> </li> </ul>"},{"location":"LM35IC/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir src <ul> <li>file LM35IC.cpp </li> <li>file LM35IC.h </li> </ul> </li> </ul>"},{"location":"LM35IC/namespaceLM35/","title":"Namespace LM35","text":"<p>Namespace List &gt; LM35</p> <p>The library's namespace. More...</p>"},{"location":"LM35IC/namespaceLM35/#classes","title":"Classes","text":"Type Name class LM35IC LM35 sensor class."},{"location":"LM35IC/namespaceLM35/#public-types","title":"Public Types","text":"Type Name enum sensors Sensors supported by this library."},{"location":"LM35IC/namespaceLM35/#detailed-description","title":"Detailed Description","text":"<p>A namespace containing the sensors type and the LM35IC class, both of which are defined by the library. </p>"},{"location":"LM35IC/namespaceLM35/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"LM35IC/namespaceLM35/#enum-sensors","title":"enum sensors","text":"<p>Sensors supported by this library. <pre><code>enum LM35::sensors {\n    LM35_normal,\n    LM35A,\n    LM35CA,\n    LM35C,\n    LM35D\n};\n</code></pre></p> <p>This type defines every sensor supported by this library: LM35_normal, LM35A, LM35CA, LM35C, and LM35D. Read the sensors' data sheet for more details. </p> <p>The documentation for this class was generated from the following file <code>src/LM35IC.cpp</code></p>"},{"location":"LM35IC/classLM35_1_1LM35IC/","title":"Class LM35::LM35IC","text":"<p>ClassList &gt; LM35 &gt; LM35IC</p> <p>LM35 sensor class.More...</p> <ul> <li><code>#include &lt;LM35IC.h&gt;</code></li> </ul>"},{"location":"LM35IC/classLM35_1_1LM35IC/#public-functions","title":"Public Functions","text":"Type Name LM35IC (uint8_t pin, sensors sensor=LM35D, double gain=1.0, double offset=0.0, double Vcc=5.0, uint8_t ADC_bits=10) Class constructor. double computeAccuracy (double temperature, bool worst_case=false) constCompute an estimate of the sensor's accuracy for a given estimate. double computeError (double temperature, bool worst_case=false) constCompute an error estimate for a given measurement. double getResolution () constGet the measurements' resolution. double readTemp () constCollect a sensor reading and convert it to a temperature value."},{"location":"LM35IC/classLM35_1_1LM35IC/#public-static-functions","title":"Public Static Functions","text":"Type Name double Celsius2Fahrenheit (double temperature_Celsius) Convert a temperature value from Celsius to Fahrenheit. double Celsius2Kelvin (double temperature_Celsius) Convert a temperature value from Celsius to Kelvin."},{"location":"LM35IC/classLM35_1_1LM35IC/#detailed-description","title":"Detailed Description","text":"<p>This class implements the operations associated with the sensor. These include collecting a sample, unit conversion, and computing measurement error, sensor accuracy and measurement chain resolution. </p>"},{"location":"LM35IC/classLM35_1_1LM35IC/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"LM35IC/classLM35_1_1LM35IC/#function-lm35ic","title":"function LM35IC","text":"<p>Class constructor. <pre><code>LM35::LM35IC::LM35IC (\n    uint8_t pin,\n    sensors sensor=LM35D,\n    double gain=1.0,\n    double offset=0.0,\n    double Vcc=5.0,\n    uint8_t ADC_bits=10\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>pin</code> Analog input pin connected to the sensor's output. </li> <li><code>sensor</code> Sensor type. </li> <li><code>gain</code> Signal conditioning circuit gain. </li> <li><code>offset</code> Signal conditioning circuit offset. </li> <li><code>Vcc</code> Arduino board operating voltage. </li> <li><code>ADC_bits</code> Number of bits of the Analog-to-Digital Converter. </li> </ul>"},{"location":"LM35IC/classLM35_1_1LM35IC/#function-computeaccuracy","title":"function computeAccuracy","text":"<p>Compute an estimate of the sensor's accuracy for a given estimate. <pre><code>double LM35::LM35IC::computeAccuracy (\n    double temperature,\n    bool worst_case=false\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>temperature</code> Temperature measurement in Celsius. </li> <li><code>worst_case</code> Accuracy curve that should be used. 'true' for worst-case curve, 'false' for typical curve.</li> </ul> <p>Returns:</p> <p>Sensor accuracy for the given measurement.</p> <p>See also: LM35IC::computeError </p>"},{"location":"LM35IC/classLM35_1_1LM35IC/#function-computeerror","title":"function computeError","text":"<p>Compute an error estimate for a given measurement. <pre><code>double LM35::LM35IC::computeError (\n    double temperature,\n    bool worst_case=false\n) const\n</code></pre></p> <p>This method yields an estimate of the total measurement error. It takes into account the sensor's accuracy, the measurement's resolution, and the ADC noise. The method uses the LM35IC::computeAccuracy and LM35IC::getResolution to compute the sensor's accuracy and the measurement's resolution, respectively.</p> <p>Parameters:</p> <ul> <li><code>temperature</code> Temperature measurement in Celsius. </li> <li><code>worst_case</code> Accuracy curve that should be used. 'true' for worst-case curve, 'false' for typical curve.</li> </ul> <p>Returns:</p> <p>Error estimate in Celsius. </p>"},{"location":"LM35IC/classLM35_1_1LM35IC/#function-getresolution","title":"function getResolution","text":"<p>Get the measurements' resolution. <pre><code>double LM35::LM35IC::getResolution () const\n</code></pre></p> <p>Returns:</p> <p>Measurement resolution.</p> <p>See also: LM35IC::computeError </p>"},{"location":"LM35IC/classLM35_1_1LM35IC/#function-readtemp","title":"function readTemp","text":"<p>Collect a sensor reading and convert it to a temperature value. <pre><code>double LM35::LM35IC::readTemp () const\n</code></pre></p> <p>Returns:</p> <p>Temperature value in Celsius. </p>"},{"location":"LM35IC/classLM35_1_1LM35IC/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"LM35IC/classLM35_1_1LM35IC/#function-celsius2fahrenheit","title":"function Celsius2Fahrenheit","text":"<p>Convert a temperature value from Celsius to Fahrenheit. <pre><code>static double LM35::LM35IC::Celsius2Fahrenheit (\n    double temperature_Celsius\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>temperature_Celsius</code> Temperature in Celsius.</li> </ul> <p>Returns:</p> <p>Temperature in Fahrenheit. </p>"},{"location":"LM35IC/classLM35_1_1LM35IC/#function-celsius2kelvin","title":"function Celsius2Kelvin","text":"<p>Convert a temperature value from Celsius to Kelvin. <pre><code>static double LM35::LM35IC::Celsius2Kelvin (\n    double temperature_Celsius\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>temperature_Celsius</code> Temperature in Celsius.</li> </ul> <p>Returns:</p> <p>Temperature in Kelvin. </p> <p>The documentation for this class was generated from the following file <code>src/LM35IC.h</code></p>"},{"location":"LM35IC/dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"Dir src","text":"<p>FileList &gt; src</p>"},{"location":"LM35IC/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","title":"Files","text":"Type Name file LM35IC.cpp file LM35IC.h <p>The documentation for this class was generated from the following file <code>src/</code></p>"},{"location":"LM35IC/LM35IC_8cpp/","title":"File LM35IC.cpp","text":"<p>FileList &gt; src &gt; LM35IC.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"LM35IC.h\"</code></li> <li><code>#include &lt;math.h&gt;</code></li> <li><code>#include &lt;Arduino.h&gt;</code></li> </ul>"},{"location":"LM35IC/LM35IC_8cpp/#namespaces","title":"Namespaces","text":"Type Name namespace LM35 The library's namespace."},{"location":"LM35IC/LM35IC_8cpp/#macros","title":"Macros","text":"Type Name define ADC_reading (x) 0.0 define TESTING  1MIT License."},{"location":"LM35IC/LM35IC_8cpp/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"LM35IC/LM35IC_8cpp/#define-adc_reading","title":"define ADC_reading","text":"<pre><code>#define ADC_reading (\n    x\n) 0.0\n</code></pre>"},{"location":"LM35IC/LM35IC_8cpp/#define-testing","title":"define TESTING","text":"<p>MIT License. <pre><code>#define TESTING 1\n</code></pre></p> <p>Copyright (c) 2024 Miguel Santos Loureiro</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </p> <p>The documentation for this class was generated from the following file <code>src/LM35IC.cpp</code></p>"},{"location":"LM35IC/LM35IC_8cpp_source/","title":"File LM35IC.cpp","text":"<p>File List &gt; src &gt; LM35IC.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"LM35IC.h\"\n#include &lt;math.h&gt;\n#include &lt;Arduino.h&gt;\n\n#define TESTING 1\n\n#if TESTING != 0\n#define ADC_reading(x) 0.0\n#else\n#define ADC_reading(x) analogRead(x)\n#endif\n\nnamespace LM35{\n\n    LM35IC::LM35IC(uint8_t pin, sensors sensor, double gain, double offset, double Vcc, uint8_t ADC_bits): \n        _pin(pin), _sensor(sensor), _gain(gain), _offset(offset), _adc_res(Vcc / pow(2.0, static_cast&lt;double&gt;(ADC_bits))){ \n\n        };     \n\n    double LM35IC::readTemp() const {\n\n        const double adc_reading = analogRead(_pin); //ADC_reading(_pin);\n\n        return 1.0 / _sensitivity * (1.0 / _gain * adc_reading * _adc_res + _offset);\n\n    };\n\n    double LM35IC::computeError(double temperature, bool worst_case) const {\n\n        return computeAccuracy(temperature, worst_case) + _adc_accuracy * _resolution;\n\n    };\n\n    double LM35IC::computeAccuracy(double temperature, bool worst_case) const {\n\n        const bool above_reference_temperature = temperature &lt; _reference_temperature ? false : true;\n        const int intercept_index = _intercept_indices[worst_case];\n        const int slope_index = _slope_indices[2 * worst_case + above_reference_temperature];\n\n        return _sensors[_sensor][slope_index] * abs(temperature - _reference_temperature) + _sensors[_sensor][intercept_index]; \n\n    };\n\n    double LM35IC::getResolution() const {\n\n        return this-&gt;_resolution;\n\n    };\n\n    double LM35IC::Celsius2Kelvin(double temperature_Celsius){\n\n        return temperature_Celsius + 273.15;\n\n    };\n\n    double LM35IC::Celsius2Fahrenheit(double temperature_Celsius){\n\n        return 9.0 / 5.0 * temperature_Celsius + 32.0;\n\n    };\n\n    double LM35IC::_computeResolution() const {\n\n        const double sensor_range = _sensors[_sensor][1] - _sensors[_sensor][0];\n\n        return (sensor_range) / trunc((1.0 / _adc_res * _gain * _sensitivity * (sensor_range)));\n\n    };\n\n    constexpr double LM35IC::_sensitivity;\n    constexpr double LM35IC::_reference_temperature;\n    constexpr double LM35IC::_adc_accuracy;\n    constexpr uint8_t LM35IC::_n_sensors;\n    constexpr uint8_t LM35IC::_n_details;\n    constexpr double LM35IC::_sensors[_n_sensors][_n_details];\n    constexpr uint8_t LM35IC::_slope_indices[4];\n    constexpr uint8_t LM35IC::_intercept_indices[2];\n\n};\n</code></pre>"},{"location":"LM35IC/LM35IC_8h/","title":"File LM35IC.h","text":"<p>FileList &gt; src &gt; LM35IC.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;stdint.h&gt;</code></li> </ul>"},{"location":"LM35IC/LM35IC_8h/#namespaces","title":"Namespaces","text":"Type Name namespace LM35 The library's namespace."},{"location":"LM35IC/LM35IC_8h/#classes","title":"Classes","text":"Type Name class LM35IC LM35 sensor class. <p>The documentation for this class was generated from the following file <code>src/LM35IC.h</code></p>"},{"location":"LM35IC/LM35IC_8h_source/","title":"File LM35IC.h","text":"<p>File List &gt; src &gt; LM35IC.h</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef _LM35IC_H_\n#define _LM35IC_H_\n\n#include &lt;stdint.h&gt;\n\n\nnamespace LM35{\n\n\n    enum sensors{LM35_normal, LM35A, LM35CA, LM35C, LM35D};\n\n\n    class LM35IC{\n\n        // Define public methods.\n        public:\n\n\n            LM35IC(uint8_t pin, sensors sensor=LM35D, double gain=1.0, double offset=0.0, double Vcc=5.0, uint8_t ADC_bits=10);\n\n\n            double readTemp() const;\n\n\n            double computeError(double temperature, bool worst_case=false) const;\n\n\n            double getResolution() const;\n\n\n            double computeAccuracy(double temperature, bool worst_case=false) const;\n\n\n            static double Celsius2Kelvin(double temperature_Celsius);\n\n\n            static double Celsius2Fahrenheit(double temperature_Celsius);\n\n        // Define private methods.\n        private:\n\n            double _computeResolution() const;\n\n        // Define private attributes.\n        private:\n\n            uint8_t _pin;\n            sensors _sensor;\n            double _gain;\n            double _offset;\n            double _adc_res;\n            static constexpr double _sensitivity = 0.01;\n            static constexpr double _reference_temperature = 25.0;\n            static constexpr double _adc_accuracy = 2.0;\n            static constexpr uint8_t _n_sensors = 5;\n            static constexpr uint8_t _n_details = 8;\n            static constexpr double _sensors[_n_sensors][_n_details] = {{-55.0, 150.0, 0.005, 0.4, 0.0032, 0.00625, 1.0, 0.004},\n                                                                        {-55.0, 150.0, 0.0025, 0.2, 0.0016, 0.00625, 0.5, 0.004},\n                                                                        {-40.0, 110.0, 0.003077, 0.2, 0.002353, 0.0154, 0.5, 0.005882},\n                                                                        {-40.0, 110.0, 0.006154, 0.4, 0.004706, 0.0154, 1.0, 0.005882},\n                                                                        {0.0, 100.0, 0.012, 0.6, 0.004, 0.02, 1.5, 0.0067}};\n            static constexpr uint8_t _slope_indices[4] = {2, 4, 5, 7};\n            static constexpr uint8_t _intercept_indices[2] = {3, 6};\n            const double _resolution = _computeResolution();\n\n    };\n};\n\n#endif\n</code></pre>"},{"location":"LM35IC/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace LM35 The library's namespace. </li> </ul>"},{"location":"LM35IC/classes/","title":"Class Index","text":""},{"location":"LM35IC/classes/#l","title":"l","text":"<ul> <li>LM35IC (LM35)</li> </ul>"},{"location":"LM35IC/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class LM35::LM35IC LM35 sensor class.</li> </ul>"},{"location":"LM35IC/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"LM35IC/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"LM35IC/class_members/","title":"Class Members","text":""},{"location":"LM35IC/class_members/#c","title":"c","text":"<ul> <li>Celsius2Fahrenheit (LM35::LM35IC)</li> <li>Celsius2Kelvin (LM35::LM35IC)</li> <li>computeAccuracy (LM35::LM35IC)</li> <li>computeError (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_members/#g","title":"g","text":"<ul> <li>getResolution (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_members/#l","title":"l","text":"<ul> <li>LM35IC (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_members/#r","title":"r","text":"<ul> <li>readTemp (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_members/#_","title":"_","text":"<ul> <li>_adc_accuracy (LM35::LM35IC)</li> <li>_adc_res (LM35::LM35IC)</li> <li>_computeResolution (LM35::LM35IC)</li> <li>_gain (LM35::LM35IC)</li> <li>_intercept_indices (LM35::LM35IC)</li> <li>_n_details (LM35::LM35IC)</li> <li>_n_sensors (LM35::LM35IC)</li> <li>_offset (LM35::LM35IC)</li> <li>_pin (LM35::LM35IC)</li> <li>_reference_temperature (LM35::LM35IC)</li> <li>_resolution (LM35::LM35IC)</li> <li>_sensitivity (LM35::LM35IC)</li> <li>_sensor (LM35::LM35IC)</li> <li>_sensors (LM35::LM35IC)</li> <li>_slope_indices (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_member_functions/","title":"Class Member Functions","text":""},{"location":"LM35IC/class_member_functions/#c","title":"c","text":"<ul> <li>Celsius2Fahrenheit (LM35::LM35IC)</li> <li>Celsius2Kelvin (LM35::LM35IC)</li> <li>computeAccuracy (LM35::LM35IC)</li> <li>computeError (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_member_functions/#g","title":"g","text":"<ul> <li>getResolution (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_member_functions/#l","title":"l","text":"<ul> <li>LM35IC (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_member_functions/#r","title":"r","text":"<ul> <li>readTemp (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_member_functions/#_","title":"_","text":"<ul> <li>_computeResolution (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_member_variables/","title":"Class Member Variables","text":""},{"location":"LM35IC/class_member_variables/#_","title":"_","text":"<ul> <li>_adc_accuracy (LM35::LM35IC)</li> <li>_adc_res (LM35::LM35IC)</li> <li>_gain (LM35::LM35IC)</li> <li>_intercept_indices (LM35::LM35IC)</li> <li>_n_details (LM35::LM35IC)</li> <li>_n_sensors (LM35::LM35IC)</li> <li>_offset (LM35::LM35IC)</li> <li>_pin (LM35::LM35IC)</li> <li>_reference_temperature (LM35::LM35IC)</li> <li>_resolution (LM35::LM35IC)</li> <li>_sensitivity (LM35::LM35IC)</li> <li>_sensor (LM35::LM35IC)</li> <li>_sensors (LM35::LM35IC)</li> <li>_slope_indices (LM35::LM35IC)</li> </ul>"},{"location":"LM35IC/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"LM35IC/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"LM35IC/namespace_members/","title":"Namespace Members","text":""},{"location":"LM35IC/namespace_members/#s","title":"s","text":"<ul> <li>sensors (LM35)</li> </ul>"},{"location":"LM35IC/namespace_member_functions/","title":"Namespace Member Functions","text":"<p>Nothing related to Namespace Member Functions found.</p>"},{"location":"LM35IC/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"LM35IC/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"LM35IC/namespace_member_enums/","title":"Namespace Member Enums","text":""},{"location":"LM35IC/namespace_member_enums/#s","title":"s","text":"<ul> <li>sensors (LM35)</li> </ul>"},{"location":"LM35IC/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"LM35IC/macros/","title":"Macros","text":""},{"location":"LM35IC/macros/#a","title":"a","text":"<ul> <li>ADC_reading (LM35IC.cpp)</li> </ul>"},{"location":"LM35IC/macros/#t","title":"t","text":"<ul> <li>TESTING (LM35IC.cpp)</li> </ul>"},{"location":"LM35IC/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"LM35IC/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}